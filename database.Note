数据库相关
=

1.索引的概念

索引就是加快检索表中数据的方法。数据库的索引类似于书籍的索引。在书籍中，索引允许用户不必翻阅完整个书就能迅速地找到所需要的信息。在数据库中，索引也允许数据库程序迅速地找到表中的数据，而不必扫描整个数据库。

索引的特点：索引可以加快数据库的检索速度; 索引降低了数据库插入、修改、删除等维护任务的速度; 索引创建在表上，不能创建在视图上; 索引既可以直接创建，也可以间接创建; 可以在优化隐藏中，使用索引; 使用查询处理器执行SQL语句，在一个表上，一次只能使用一个索引

索引的优点:创建唯一性索引，保证数据库表中每一行数据的唯一性; 大大加快数据的检索速度，这也是创建索引的最主要的原因; 加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义; 在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间; 通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能。

索引的缺点:创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加; 索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大; 当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度

索引的类型:有两种基本的索引结构，也就是索引文件的保存方式，一个是顺序索引，就是根据值的顺序排序的（这个文件里面的值，也就是为其建索引的字段值，是顺序的放在索引文件里面），另外一个是散列索引，就是将值平均分配到若干散列桶中，通过散列函数定位的。

 

2.解释聚集索引和非聚集索引之间的区别

聚集索引的顺序就是数据的物理存储顺序，而非聚集索引是索引顺序与数据物理排列顺序无关。正是因为如此，所以一个表最多只能有一个聚集索引。在SQL Server中，索引是通过二叉树的数据结构来描述的，我们可以这么理解聚集索引：索引的叶节点就是数据节点。而非聚集索引的叶节点仍然是索引节点，只不过有一个指针指向对应的数据块。

聚集索引确定表中数据的物理顺序。聚集索引类似于电话簿（电话簿按照字母簿排序），后者按姓氏排列数据。由于聚集索引规定数据在表中的物理存储顺序，因此一个表只能包含一个聚集索引。但该索引可以包含多个列（组合索引），就像电话簿按姓氏和名字进行组织一样。聚集索引对于那些经常要搜索范围值的列特别有效。使用聚集索引找到包含第一个值的行后，便可以确保包含后续索引值的行在物理相邻。例如，如果应用程序执行的一个查询经常检索某一日期范围内的记录，则使用聚集索引可以迅速找到包含开始日期的行，然后检索表中所有相邻的行，直到到达结束日期。这样有助于提高此类查询的性能。同样，如果对从表中检索的数据进行排序时经常要用到某一列，则可以将该表在该列上聚集（物理排序），避免每次查询该列时都进行排序，从而节省成本。
使用非聚集索引，非聚集索引与课本中的索引类似。数据存储在一个地方，索引存储在另一个地方，索引带有指针指向数据的存储位置。索引中的项目按索引键值的顺序存储，而表中的信息按另一种顺序存储（这可以由聚集索引规定）。如果在表中未创建聚集索引，则无法保证这些行具有任何特定的顺序。
有索引就一定检索得快吗？答案是否定的。有些时候用索引还不如不用索引快。比如说我们要检索表中的所有8000条记录，如果不用索引，需要访问8000条×1000字节/8K字节=1000个页面，如果使用索引的话，首先检索索引，访问8000条×10字节/8K字节=10个页面得到索引检索结果，再根据索引检索结果去对应数据页面，由于是检索所有数据，所以需要再访问8000条×1000字节/8K字节=1000个页面将全部数据读取出来，一共访问了1010个页面，这显然不如不用索引快。

 

3.数据库范式？

为了建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种规则就称为范式。

第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。

第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。

3NF：不存在非主属性对键的传递函数依赖。
BCNF：3NF+不存在主属性对键的传递函数依赖。

 

4.画出一个数据库的实体关系图(ER图)，其中的实体有公司(companies)，人(people)， 专业人士(professionals)。

在公司中工作的人(people)是专业人士(professionals)，因此， professionals和people间是ISA(is a)的关系。 除了people的属性，每个professional还有自己额外的属性，如：级别，工作经验等。一个professional只能去一家公司上班， 而一家公司可以雇佣很多的professional。因此，它们之间是多对一的关系。 “工作(work for)"关系可以有如下属性：加入公司的时间，工资等。 为什么这两个属性是关系的属性而不是professional的属性呢？ 因为只有当我们将professional和companies联系起来，才会有这些属性， 或是说这些属性才有意义。一个人可以有多个电话号码，因此电话号码是一个多值属性。

ER图如下：

<img src="images/database_1.png" alt="jvm物理结构" />
 


 

5.SQL的连接有哪些不同的类型？解释它们的不同点及在什么情况下用哪种连接，为什么？

内连接(INNER JOIN)：结果只包含两个表中严格匹配的记录。

外连接(OUTER JOIN)：外连接一定包含内连接的结果，但同时还包含一些别的记录。 外连接可分为以下类型：

2.1 左连接(LEFT JOIN)， 结果包含左边的表中所有记录，对于与右表没有匹配的记录，来自右表的所有列设为NULL

2.2 右连接(RIGHT JOIN)， 右连接与左连接相反，结果将包含右表中的所有记录。右连接很少使用， 因为它总是可以被替换成左连接，只需要交换两表的位置。

2.3 全连接是左右连接的并集， 结果集中包含被连接表的所有记录，如果缺少匹配的记录，即以NULL填充。

 

6.存储过程和函数的区别是什么？

存储过程是用户定义的一系列SQL语句的集合，涉及特定表或其他对象的任务，用户可以调用存储过程。

而函数通常是数据库已定义的方法，它接收参数并返回某种类型的值，并且不涉及特定用户表。

 

7.什么是数据库事务？
数据库事务是指作为单个逻辑工作单元执行的一系列操作，这些操作要么全做要么全不做，是一个不可分割的工作单位。事务具有原子性、一致性、独立性及持久性。
●　事务的原子性是指一个事务要么全部执行，要么不执行。也就是说一个事务不可能只执行了一半就停止了。
●　事务的一致性是指事务的运行并不改变数据库中数据的一致性。例如，完整性约束了a+b=10，一个事务改变了a，那么b也应该随之改变。
●　事务的独立性是指两个以上的事务不会出现交错执行的状态。因为这样可能会导致数据不一致。
●　事务的持久性是指事务运行成功以后，就系统的更新是永久的。不会无缘无故的回滚。

 

8.游标的作用是什么，如何知道游标已经到了最后？
标用于定位结果集的行。通过判断全局变量@@FETCH_ STATUS可以判断其是否到了最后。通常此变量不等于0表示出错或到了最后。

 

9.触发器分为事前触发和事后触发，这两种触发有何区别？语句级触发和行级触发有何区别？
事前触发器运行于触发事件发生之前，而事后触发器运行于触发事件发生之后。语句级触发器可以在语句执行前或后执行，而行级触发在触发器所影响的每一行触发一次。

 

10.什么叫做SQL注入式攻击，如何防范？
所谓SQL注入式攻击，就是攻击者把SQL命令插入到Web表单的输入域或页面请求的查询字符串中，欺骗服务器执行恶意的SQL命令。在某些表单中，用户输入的内容直接用来构造（或者影响）动态SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击。防范SQL注入式攻击闯入并不是一件特别困难的事情，只要在利用表单输入的内容构造SQL命令之前，把所有输入内容过滤一番就可以了。

 

11.有一个简单的数据库，存储学生的成绩信息。尝试设计这个数据库？ 提供一个SQL查询语句来返回光荣榜学生信息(前10%)，按照他们的GPA排序。

在一个简单的数据库中，我们至少需要以下三张表：学生表(Students)，课程表(Courses)， 及课程登记表(CourseEnrollment)。学生表中至少需要有学生姓名和学生ID， 及其它的个人信息。课程表包含课程名和课程ID，还可以包含课程描述和授课老师等。 课程登记表将包含学生和课程对(即哪个学生选了什么课，某课程有哪些学生选)， 还包含课程成绩等。我们假设课程成绩是一个整数。

SELECT StudentName, GPA FROM (SELECT top 10 percent Avg(CourseEnrollment.Grade) AS GPA,CourseEnrollment.StudentID FROM CourseEnrollment GROUP BY CourseEnrollment.StudentID ORDER BY Avg(CourseEnrollment.Grade)) Honors INNER JOIN Students ON Honors.StudentID = Students.StudentID

 

12.简述一下你对cache失效时间的做法。

缓存timeout后作废cache

后端数据库更新后作废cache

LRU


13.m阶B+树和m阶的B树的差异

  ⑴有n棵子树的结点中含有n个关键码；

  ⑵所有的叶子结点中包含了全部关键码的信息，及指向含有这些关键码记录的指针，且叶子结点本身依关键码的大小自小而大的顺序链接。

  ⑶所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键码。