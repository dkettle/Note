unix相关
=

1.G++：如何编译一个文件？

编译(compile)：用编译器将源代码生成二进制目标文件(object file)，在Windows下也就是 .obj 文件，UNIX下是 .o 文件。

g++ -c file.cpp

链接(link)：找到所要用到函数所在的目标文件，并把它们链接在一起合成为可执行文件(executable file)。

g++ file1.o file2.o -o program.exe

也可以合在一起完成：

    g++ file1.cpp file2.cpp -o program.exe

这完全等同于上面两步的结合，会先生成目标文件，然后链接成 file.exe

 

创建了自己的库，以后要用到相关函数的时候，只需在代码中声明所要用的函数（必须和库中定义得相同）。在链接的时候，需要给出库的名称和位置：

g++ file1.o file2.o -o program.exe -L**** -l****

-L 后紧跟库文件所在的目录地址，-l 后紧跟库名。

编译器在链接的时候会在所指定的目录地址下寻找名为 lib****.a 的库文件。

 

2.gdb

 命令

 解释

 示例

file <文件名>

加载被调试的可执行程序文件。
因为一般都在被调试程序所在目录下执行GDB，因而文本名不需要带路径。

(gdb) file gdb-sample

r

Run的简写，运行被调试的程序。
如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。

(gdb) r

c

Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。

(gdb) c

b <行号>
b <函数名称>
b *<函数名称>
b *<代码地址>

d [编号]

b: Breakpoint的简写，设置断点。两可以使用“行号”“函数名称”“执行地址”等方式指定断点位置。
其中在函数名称前面加“*”符号表示将断点设置在“由编译器生成的prolog代码处”。如果不了解汇编，可以不予理会此用法。

d: Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。

(gdb) b 8
(gdb) b main
(gdb) b *main
(gdb) b *0x804835c

(gdb) d

s, n

s: 执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；
n: 执行一行源程序代码，此行代码中的函数调用也一并执行。

s 相当于其它调试器中的“Step Into (单步跟踪进入)”；
n 相当于其它调试器中的“Step Over (单步跟踪)”。

这两个命令必须在有源代码调试信息的情况下才可以使用（GCC编译时使用“-g”参数）。

(gdb) s
(gdb) n

si, ni

si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指令，而s/n针对的是源代码。

(gdb) si
(gdb) ni

p <变量名称>

Print的简写，显示指定变量（临时变量或全局变量）的值。

(gdb) p i
(gdb) p nGlobalVar

display ...

undisplay <编号>

display，设置程序中断后欲显示的数据及其格式。
例如，如果希望每次程序中断后可以看到即将被执行的下一条汇编指令，可以使用命令
“display /i $pc”
其中 $pc 代表当前汇编指令，/i 表示以十六进行显示。当需要关心汇编代码时，此命令相当有用。

undispaly，取消先前的display设置，编号从1开始递增。

(gdb) display /i $pc

(gdb) undisplay 1

i

Info的简写，用于显示各类信息，详情请查阅“help i”。
info break 显示当前断点清单，包括到达断点处的次数等。
info files 显示被调试文件的详细信息。
info func 显示所有的函数名称。
info local 显示当函数中的局部变量信息。
info prog 显示被调试程序的执行状态。
info var 显示所有的全局和静态变量名称。

(gdb) i r

q

Quit的简写，退出GDB调试环境。

(gdb) q

bt 
frame n
up n
down n 

显示所有的调用栈帧。该命令可用来显示函数的调用顺序。
通过帧编号来选择帧，帧编号可以通过bt来查看。
在栈中向上移动n个帧。即向着最外层移动n个帧。
与 up 反方向移动n个帧。




3.查看进程的两种命令？

ps -A   显示所有进程

top   Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。

 

5./proc路径是做什么用的？

一个虚拟文件系统 ，是一种内核和内核模块用来向进程 (process) 发送信息的机制 (所以叫做 /proc)。可以获取 有关进程的有用信息，在运行中 (on the fly) 改变设置 (通过改变内核参数)。 与其他文件系统不同，/proc 存在于内存之中而不是硬盘上

 

6.netstat ：显示网络状态

tcpdump：主要是截获通过本机网络接口的数据，用以分析。能够截获当前所有通过本机网卡的数据包。它拥有灵活的过滤机制，可以确保得到想要的数据。
ipcs：检查系统上共享内存的分配
ipcrm：手动解除系统上共享内存的分配